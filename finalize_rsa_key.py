from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

# Assuming you have these values already calculated and imported
p = 12450191150313284813043384719119744487448892591927191624238458752965275403080500440454110929720642448244722789042403242871007074837314848634594404655820947
e = 65537
d = 4352572097061169930375422708656693865300681362061487939220384357719664053327999408221547769803684515722841799127726346108114486543179479642597621173629223994672205297428623761356018343824158473260073449918215907824061149083047765091030179849191638417065744829474323317231024263871675181211858423927877150353

q = 10404930820632465047837699765912267324054447253064190169708072259298262474377274878609741622183077663567526961116858812811612014286960319038993708333484181
dmp1 = 9512275070242562173409041604830307245915146403756326029706396488677804446084605918098451904618337865152658185344633034423868444561912035961844622578486449
dmq1 = 6646664156213713615632776915329006080863320479264115254815271451783294299247823562155680501284687220734158051591578714288999145187048442201618499464139573
iqmp = 7267615378895013859914364624954177528060482163608049891428427023583067473221395325608154298137420344508819124000491659017447585187120843040468877972435534

# Generate private key object
private_key = rsa.RSAPrivateNumbers(
    p=p,
    q=q,
    d=d,
    dmp1=dmp1,
    dmq1=dmq1,
    iqmp=iqmp,
    public_numbers=rsa.RSAPublicNumbers(e=e, n=p*q)
).private_key(backend=default_backend())

# Serialize private key to PEM format
pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.TraditionalOpenSSL,
    encryption_algorithm=serialization.NoEncryption()
)

# Write to a file or print it
with open('complete_private_key.pem', 'wb') as f:
    f.write(pem)

print('Complete RSA Private Key written to complete_private_key.pem')
